ylab('Count')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth=100) +
xlab('Price') +
ylab('Count')
ggplot(aes(x = price), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of users in sample')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of users in sample')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of users in sample')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 20000, 1000)) +
xlab('Price') +
ylab('Number of users in sample') +
facet_wrap(~cut)
by(diamonds$price, diamonds$cut)
by(diamonds$price, diamonds$cut, summary)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 20000, 1000)) +
xlab('Price') +
ylab('Number of users in sample') +
facet_grid(. ~ cut, scales="free")
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 20000, 1000)) +
xlab('Price') +
ylab('Number of users in sample') +
facet_grid(. ~ cut, scales="free", space="free")
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 20000, 1000)) +
xlab('Price') +
ylab('Number of users in sample') +
facet_grid(. ~ cut, scales="free_y", space="free")
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
xlab('Price') +
ylab('Number of users in sample') +
facet_grid(. ~ cut, scales="free_y", space="free")
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
xlab('Price') +
ylab('Number of users in sample') +
facet_wrap(~cut, scales="free_y", space="free")
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
xlab('Price') +
ylab('Number of users in sample') +
facet_wrap(~cut, scales="free_y")
ggplot(aes(x = price/carat), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
xlab('Price') +
ylab('Number of users in sample') +
facet_wrap(~cut, scales="free_y")
ggplot(aes(x = price/carat), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
xlab('Price') +
ylab('Number of users in sample') +
scale_x_log10() +
facet_wrap(~cut, scales="free_y")
qplot(x=cut, y=price/carat, data=diamonds, geom='boxplot')
by(diamonds$price, diamonds$color, summary)
ggplot(aes(x = carat, y = ..count../sum(..count..)),
data = diamonds) +
geom_freqpoly(aes(color = gender), binwidth=100)
ggplot(aes(x = carat, y = ..count../sum(..count..)),
data = diamonds) +
geom_freqpoly(aes(color = carat), binwidth=100)
ggplot(aes(x = carat, y = ..count..),
data = diamonds) +
geom_freqpoly(aes(color = carat), binwidth=100)
ggplot(aes(x = carat, y = ..count..),
data = diamonds)
ggplot(aes(x = carat, y = ..count..),
data = diamonds, geom='freqpoly')
ggplot(aes(x = carat),
data = diamonds, geom='freqpoly')
ggplot(aes(x = carat, y = ..count..,
data = diamonds) +
geom_freqpoly(binwidth=100)
ggplot(aes(x = carat)
data = diamonds) +
geom_freqpoly()
summary(diamonds$carat)
ggplot(aes(x = carat)
data = diamonds) +geom_freqpoly()
ggplot(aes(x = carat),
data = diamonds) +geom_freqpoly()
ggplot(aes(x = carat),
data = diamonds) +geom_freqpoly(binwidth=0.1)
pf <- read.csv('../lesson3/pseudo_facebook.tsv', sep='\t')
pf.fc_by_age_gender <- group_by(subset(pf, !is.na(gender) & !is.na(age)), age, gender) %>%
summarise(mean_friend_count = mean(friend_count), median_friend_count = median(friend_count), n=n()) %>%
arrange(age) %>%
ungroup() # because we group by > 1 column
pf.fc_by_age_gender <- group_by(subset(pf, !is.na(gender) & !is.na(age)), age, gender) %>%
summarise(mean_friend_count = mean(friend_count), median_friend_count = median(friend_count), n=n()) %>%
arrange(age) %>%
ungroup() # because we group by > 1 column
pf.fc_by_age_gender <- group_by(subset(pf, !is.na(gender) & !is.na(age)), age, gender) %>%
summarise(mean_friend_count = mean(friend_count), median_friend_count = median(friend_count), n=n()) %>%
arrange(age) %>%
ungroup() # because we group by > 1 column
library(ggplot2)
library(dplyr)
pf.fc_by_age_gender <- group_by(subset(pf, !is.na(gender) & !is.na(age)), age, gender) %>%
summarise(mean_friend_count = mean(friend_count), median_friend_count = median(friend_count), n=n()) %>%
arrange(age) %>%
ungroup() # because we group by > 1 column
install.packages('reshape2')
install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
# What we keep ~ What we will change
age ~ gender,
value.var = 'median_friend_count')
install.packages(GGally)
install.packages(GGally)
install.packages('GGally')
library(GGally)
theme_set(theme_minimal(20))
set.seed(1836)
c(2:15)
pf_subset <- pf[,c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ])
with(pf_subset[sample.int(nrow(pf_subset), 1000), ], cor.test(friendships_initiated, friend_count))
with(pf_subset[sample.int(nrow(pf_subset), 1000), ], cor.test(age, mobile_likes))
nci <- read.table("nci.tsv")
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
head(nci)
library(ggplot2)
data(diamonds)
summary(diamonds)
ggplot(aes(x=price), data=diamonds) +geom_histogram(color=cut)
ggplot(aes(x=price), data = diamonds) +geom_histogram()
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram()
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(color=cut))
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(color=cut), scale_fill_brewer(type = 'qual'))
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(color=cut)) +scale_fill_brewer(type = 'qual')
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(fill=cut)) +scale_fill_brewer(type = 'qual')
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(fill=cut)) + facet_wrap(~color)
# Scatterplot of price vs table, color by cut
ggplot(aes(x=table, y=price), data=diamonds) + geom_point(aes(color=cut))
# Scatterplot of price vs volume, color by clarity, y axis: log 10 of price, oit 1% of diamond volumes from plot
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x=volume, y=price), data=diamonds) + geom_point(aes(color=clarity)) + scale_y_log10() + xlim(0, quantile(diamonds$volume, 0.99))
ggplot(aes(x=volume, y=price), data=diamonds) + geom_point(aes(color=clarity))+
scale_y_log10() + xlim(0, quantile(diamonds$volume, 0.99)) + scale_color_brewer(type = 'div')
pf <- read.csv('../lesson3/pseudo_facebook.tsv', sep='\t')
pf
head(pf)
pf$prop_initiated <- pf$friendships_initiated / pf$friend_count
pf$year_joined <- floor(2014 - pf$tenure / 365 )
pf$year_joined.bucket <- cut(pf$year_joined, breaks=c(2004, 2009, 2011, 2012, 2014))
ggplot(aes(x=tenure, y= prop_initiated), data=pf) + geom_line(aes(color=year_joined.bucket))
ggplot(aes(x=tenure, y= prop_initiated), data=pf) + geom_line(aes(color=year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x=7 * round(tenure/ 7), y= prop_initiated), data=pf) + geom_line(aes(color=year_joined.bucket), stat = 'summary', fun.y = median)
group_by(pf, year_joined.bucket) %>%
summarise(mean_prop = mean(prop_initiated))
group_by(pf, year_joined.bucket) %>%
summarise(mean_prop = mean(prop_initiated)) + arrange(year_joined.bucket)
group_by(pf, year_joined.bucket) %>%
summarise(mean_prop = mean(prop_initiated)) %>%
arrange(year_joined.bucket)
group_by(subset(pf, !is.na(year_joined.bucket)), year_joined.bucket) %>%
summarise(mean_prop = mean(prop_initiated)) %>%
arrange(year_joined.bucket)
group_by(subset(pf, !is.na(year_joined.bucket)), year_joined.bucket) %>%
summarise(mean_prop = mean(friend_count)) %>%
arrange(year_joined.bucket)
summary(pf$prop_initiated)
group_by(subset(pf, !is.na(year_joined.bucket) & !is.na(prop_initiated)), year_joined.bucket) %>%
summarise(mean_prop = mean(prop_initiated)) %>%
arrange(year_joined.bucket)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=cut, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_wrap(~clarity)
summary(diamonds$cut)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=carat, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_grid(cut~clarity)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=cut, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_grid(~clarity)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=cut, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_grid(clarity~)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=cut, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_grid(clarity~.)
# Scatterplot of price/carat, x= cut. color by color, facet by clarity
ggplot(aes(x=cut, y=price/carat), data=diamonds) + geom_point(aes(color=color)) + facet_wrap(~clarity)
library(ggplot2)
summary(diamonds)
# Price hist with cut as color and facet of color
ggplot(aes(x=log(price)), data = diamonds) +geom_histogram(aes(fill=cut)) + facet_wrap(~color)
# Scatterplot of price vs volume, color by clarity, y axis: log 10 of price, oit 1% of diamond volumes from plot
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x=volume, y=price), data=diamonds) + geom_point(aes(color=clarity))+
scale_y_log10() + xlim(0, quantile(diamonds$volume, 0.99)) + scale_color_brewer(type = 'div')
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("scales")
plot1 <- qplot(x=price, data=diamonds) +
ggtitle('Price')
library(ggplot2)
plot1 <- qplot(x=price, data=diamonds) +
ggtitle('Price')
plot2 <- qplot(x=log10(price), data=diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
grid.arrange(plot1, plot2)
plot2 <- qplot(x=log10(price), data=diamonds, binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
plot1 <- qplot(x=price, data=diamonds, binwidth=100) +
ggtitle('Price')
plot2 <- qplot(x=log10(price), data=diamonds, binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
qplot(carat, price, diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds) + scale_y_continuous(trans=log10_trans())
library(scales)
library(memisc)
qplot(carat, price, data=diamonds) + scale_y_continuous(trans=log10_trans())
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(diamonds$price, decreasing = T))
head(sort(diamonds$carat, decreasing = T))
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size=3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size=3/4, position=position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size=3/4, position="jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
summary(diamonds)
# install and load the RColorBrewer package
install.packages('RColorBrewer')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', aes(color=clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
summary(diamonds)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
setwd("~/Documents/DAND Projects/Part 6. Exploratory Data Analysis")
# Load the Data
wineData <- read.csv('wineQualityReds.csv')
table(wineData)
summary(wineData)
type(wineData)
shape(wineData)
names(wineData)
str(wineData)
wineData$quality <- factor(wineData$quality)
str(wineData)
dim(wineData)
str(wineData)
summary(wineData)
str(wineData)
wineData <- subset(wineData, select = -c(Xx))
wineData <- subset(wineData, select = -c(X))
wineData <- subset(wineData, select = -c(X))
str(wineData)
summary(wineData)
ggplot(aes(x=quality), data=wineData) + geom_hist()
library(ggplot2)
ggplot(aes(x=quality), data=wineData) + geom_hist()
ggplot(aes(x=quality), data=wineData) + geom_histogram()
ggplot(aes(x=quality), data=wineData) + geom_histogram(stat="count")
ggplot(aes(x=quality), data=wineData) + geom_histogram(stat="count") +
scale_y_continuous(breaks=seq(0, 700, 50))
ggplot(aes(x=pH), data=wineData) + geom_histogram(stat="count")
ggplot(aes(x=pH), data=wineData) + geom_histogram()
ggplot(aes(x=pH), data=wineData) + geom_histogram(binwidth=0.2)
ggplot(aes(x=pH), data=wineData) + geom_histogram()
ggplot(aes(x=pH), data=wineData) + geom_histogram(binwidth=0.05)
ggplot(aes(x=pH), data=wineData) + geom_histogram()
ggplot(aes(x=pH), data=wineData) + geom_histogram(binwidth=0.005)
ggplot(aes(x=pH), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=alcohol), data=wineData) + geom_histogram()
ggplot(aes(x=pH), data=wineData) + geom_histogram()
ggplot(aes(x=alcohol), data=wineData) + geom_histogram()
ggplot(aes(x=alcohol), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=density), data=wineData) + geom_histogram()
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=1)
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=3)
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=density), data=wineData) + geom_histogram()
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=0.005)
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=density), data=wineData) + geom_histogram(binwidth=0.005)
ggplot(aes(x=alcohol), data=wineData) + geom_histogram()
ggplot(aes(x=density), data=wineData) + geom_histogram()
View(wineData)
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram()
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram(binwidth=0.005)
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram()
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram(binwidth=0.005)
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram()
ggplot(aes(x=citric.acid), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=fixed.acidity), data=wineData) + geom_histogram()
ggplot(aes(x=fixed.acidity), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=fixed.acidity), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=volatile.acidity), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=volatile.acidity), data=wineData) + geom_histogram(binwidth=0.01)
grid.arrange(p1, p2, ncol=1)
p1 <- ggplot(aes(x=citric.acid), data=wineData) + geom_histogram()
p1 <- ggplot(aes(x=citric.acid), data=wineData) + geom_histogram()
p2 <- ggplot(aes(x=citric.acid), data=wineData) + geom_histogram(binwidth=0.01)
library(gridExtra)
grid.arrange(p1, p2, ncol=1)
p1 <- ggplot(aes(x=fixed.acidity), data=wineData) + geom_histogram(binwidth=0.1)
p2<- ggplot(aes(x=volatile.acidity), data=wineData) + geom_histogram(binwidth=0.01)
grid.arrange(p1, p2, ncol=1)
p1 <- ggplot(aes(x=residual.sugar), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=residual.sugar), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=chlorides), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=chlorides), data=wineData) + geom_histogram()
ggplot(aes(x=chlorides), data=wineData) + geom_histogram(binwidth=0.01)
a
ggplot(aes(x=residual.sugar), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=free.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=0.1)
ggplot(aes(x=free.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=1)
ggplot(aes(x=total.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=1)
ggplot(aes(x=total.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=2)
ggplot(aes(x=free.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=1)
ggplot(aes(x=total.sulfur.dioxide), data=wineData) + geom_histogram(binwidth=2)
ggplot(aes(x=sulphates), data=wineData) + geom_histogram(binwidth=2)
ggplot(aes(x=sulphates), data=wineData) + geom_histogram()
table(wineData$pH)
ggplot(aes(x=pH), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=chlorides), data=wineData) + geom_histogram()
ggplot(aes(x=chlorides), data=wineData) + geom_histogram(binwidth=0.01)
ggplot(aes(x=chlorides), data=wineData) + geom_histogram(binwidth=0.01)
summary(wineData$chlorides)
ggplot(aes(x=chlorides), data=wineData) + geom_histogram(binwidth=0.01)
str(wineData)
ggpairs(wineeData[sample.int(nrow(pf_subset), 1000), ])
library(GGally)
ggpairs(wineData[sample.int(nrow(pf_subset), 1000), ])
ggpairs(wineData[sample.int(nrow(wineData), 1000), ])
# Load the Data
wineData <- read.csv('wineQualityReds.csv')
wineData <- subset(wineData, select = -c(X))
ggpairs(wineData[sample.int(nrow(wineData), 1000), ])
pair <-ggpairs(wineData[sample.int(nrow(wineData), 1000), ])
pair
library(corrplot)
library(corrplot)
corrplot.mixed(cor(wineData))
corrplot
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot.mixed(cor(wineData))
pair
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA)
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
panel.border = element_rect(linetype = "dashed", colour = "black", fill = NA))
pair <-ggpairs(wineData[sample.int(nrow(wineData), 1000), ])
pair
pair <-ggpairs(wineData[sample.int(nrow(wineData), 1000), ], showStrips = FALSE)
pair
corrplot.mixed(cor(wineData))
